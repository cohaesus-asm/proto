// source: games/v1/game.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.paralympics.games.v1.ActiveGamesRequest', null, global);
goog.exportSymbol('proto.paralympics.games.v1.ActiveGamesResponse', null, global);
goog.exportSymbol('proto.paralympics.games.v1.ErrorCode', null, global);
goog.exportSymbol('proto.paralympics.games.v1.Field', null, global);
goog.exportSymbol('proto.paralympics.games.v1.FieldError', null, global);
goog.exportSymbol('proto.paralympics.games.v1.Filter', null, global);
goog.exportSymbol('proto.paralympics.games.v1.Game', null, global);
goog.exportSymbol('proto.paralympics.games.v1.GameByIDRequest', null, global);
goog.exportSymbol('proto.paralympics.games.v1.GameBySlugRequest', null, global);
goog.exportSymbol('proto.paralympics.games.v1.ListGamesRequest', null, global);
goog.exportSymbol('proto.paralympics.games.v1.ListGamesResponse', null, global);
goog.exportSymbol('proto.paralympics.games.v1.Pagination', null, global);
goog.exportSymbol('proto.paralympics.games.v1.PinSportsRequest', null, global);
goog.exportSymbol('proto.paralympics.games.v1.PinSportsResponse', null, global);
goog.exportSymbol('proto.paralympics.games.v1.PromoteGameRequest', null, global);
goog.exportSymbol('proto.paralympics.games.v1.PromoteGameResponse', null, global);
goog.exportSymbol('proto.paralympics.games.v1.PromotedGameRequest', null, global);
goog.exportSymbol('proto.paralympics.games.v1.PromotedGameResponse', null, global);
goog.exportSymbol('proto.paralympics.games.v1.PurgeRequest', null, global);
goog.exportSymbol('proto.paralympics.games.v1.PurgeResponse', null, global);
goog.exportSymbol('proto.paralympics.games.v1.RestoreRequest', null, global);
goog.exportSymbol('proto.paralympics.games.v1.RestoreResponse', null, global);
goog.exportSymbol('proto.paralympics.games.v1.Season', null, global);
goog.exportSymbol('proto.paralympics.games.v1.SetActiveGameRequest', null, global);
goog.exportSymbol('proto.paralympics.games.v1.SetActiveGameResponse', null, global);
goog.exportSymbol('proto.paralympics.games.v1.SortDirection', null, global);
goog.exportSymbol('proto.paralympics.games.v1.SortField', null, global);
goog.exportSymbol('proto.paralympics.games.v1.SortOption', null, global);
goog.exportSymbol('proto.paralympics.games.v1.ValidationError', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.Game.displayName = 'proto.paralympics.games.v1.Game';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.SortOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.SortOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.SortOption.displayName = 'proto.paralympics.games.v1.SortOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.Filter.displayName = 'proto.paralympics.games.v1.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.GameByIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.GameByIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.GameByIDRequest.displayName = 'proto.paralympics.games.v1.GameByIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.GameBySlugRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.GameBySlugRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.GameBySlugRequest.displayName = 'proto.paralympics.games.v1.GameBySlugRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.Pagination.displayName = 'proto.paralympics.games.v1.Pagination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.ListGamesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.games.v1.ListGamesRequest.repeatedFields_, null);
};
goog.inherits(proto.paralympics.games.v1.ListGamesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.ListGamesRequest.displayName = 'proto.paralympics.games.v1.ListGamesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.ListGamesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.games.v1.ListGamesResponse.repeatedFields_, null);
};
goog.inherits(proto.paralympics.games.v1.ListGamesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.ListGamesResponse.displayName = 'proto.paralympics.games.v1.ListGamesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.FieldError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.FieldError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.FieldError.displayName = 'proto.paralympics.games.v1.FieldError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.ValidationError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.games.v1.ValidationError.repeatedFields_, null);
};
goog.inherits(proto.paralympics.games.v1.ValidationError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.ValidationError.displayName = 'proto.paralympics.games.v1.ValidationError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.ActiveGamesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.ActiveGamesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.ActiveGamesRequest.displayName = 'proto.paralympics.games.v1.ActiveGamesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.ActiveGamesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.ActiveGamesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.ActiveGamesResponse.displayName = 'proto.paralympics.games.v1.ActiveGamesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.SetActiveGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.SetActiveGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.SetActiveGameRequest.displayName = 'proto.paralympics.games.v1.SetActiveGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.SetActiveGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.SetActiveGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.SetActiveGameResponse.displayName = 'proto.paralympics.games.v1.SetActiveGameResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.PromoteGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.PromoteGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.PromoteGameRequest.displayName = 'proto.paralympics.games.v1.PromoteGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.PromoteGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.PromoteGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.PromoteGameResponse.displayName = 'proto.paralympics.games.v1.PromoteGameResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.PromotedGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.PromotedGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.PromotedGameRequest.displayName = 'proto.paralympics.games.v1.PromotedGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.PromotedGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.PromotedGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.PromotedGameResponse.displayName = 'proto.paralympics.games.v1.PromotedGameResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.PinSportsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.games.v1.PinSportsRequest.repeatedFields_, null);
};
goog.inherits(proto.paralympics.games.v1.PinSportsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.PinSportsRequest.displayName = 'proto.paralympics.games.v1.PinSportsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.PinSportsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.PinSportsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.PinSportsResponse.displayName = 'proto.paralympics.games.v1.PinSportsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.RestoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.RestoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.RestoreRequest.displayName = 'proto.paralympics.games.v1.RestoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.RestoreResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.RestoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.RestoreResponse.displayName = 'proto.paralympics.games.v1.RestoreResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.PurgeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.PurgeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.PurgeRequest.displayName = 'proto.paralympics.games.v1.PurgeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.games.v1.PurgeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.games.v1.PurgeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.games.v1.PurgeResponse.displayName = 'proto.paralympics.games.v1.PurgeResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createDate: (f = msg.getCreateDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updateDate: (f = msg.getUpdateDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    deleteDate: (f = msg.getDeleteDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    location: jspb.Message.getFieldWithDefault(msg, 6, ""),
    season: jspb.Message.getFieldWithDefault(msg, 7, 0),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    promoted: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    startDate: (f = msg.getStartDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    endDate: (f = msg.getEndDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    logo: jspb.Message.getFieldWithDefault(msg, 12, ""),
    blurb: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.Game}
 */
proto.paralympics.games.v1.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.Game;
  return proto.paralympics.games.v1.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.Game}
 */
proto.paralympics.games.v1.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateDate(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdateDate(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDeleteDate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 7:
      var value = /** @type {!proto.paralympics.games.v1.Season} */ (reader.readEnum());
      msg.setSeason(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPromoted(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartDate(value);
      break;
    case 11:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEndDate(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlurb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreateDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdateDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDeleteDate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSeason();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getPromoted();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getStartDate();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndDate();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getBlurb();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.games.v1.Game.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.Game.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.paralympics.games.v1.Game.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.Game.prototype.setSlug = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp create_date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.games.v1.Game.prototype.getCreateDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.games.v1.Game.prototype.setCreateDate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.Game.prototype.clearCreateDate = function() {
  this.setCreateDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.Game.prototype.hasCreateDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp update_date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.games.v1.Game.prototype.getUpdateDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.games.v1.Game.prototype.setUpdateDate = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.Game.prototype.clearUpdateDate = function() {
  this.setUpdateDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.Game.prototype.hasUpdateDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp delete_date = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.games.v1.Game.prototype.getDeleteDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.games.v1.Game.prototype.setDeleteDate = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.Game.prototype.clearDeleteDate = function() {
  this.setDeleteDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.Game.prototype.hasDeleteDate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string location = 6;
 * @return {string}
 */
proto.paralympics.games.v1.Game.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.Game.prototype.setLocation = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Season season = 7;
 * @return {!proto.paralympics.games.v1.Season}
 */
proto.paralympics.games.v1.Game.prototype.getSeason = function() {
  return /** @type {!proto.paralympics.games.v1.Season} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.paralympics.games.v1.Season} value */
proto.paralympics.games.v1.Game.prototype.setSeason = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional bool active = 8;
 * @return {boolean}
 */
proto.paralympics.games.v1.Game.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.paralympics.games.v1.Game.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool promoted = 9;
 * @return {boolean}
 */
proto.paralympics.games.v1.Game.prototype.getPromoted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.paralympics.games.v1.Game.prototype.setPromoted = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional google.protobuf.Timestamp start_date = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.games.v1.Game.prototype.getStartDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.games.v1.Game.prototype.setStartDate = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.Game.prototype.clearStartDate = function() {
  this.setStartDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.Game.prototype.hasStartDate = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional google.protobuf.Timestamp end_date = 11;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.games.v1.Game.prototype.getEndDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 11));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.games.v1.Game.prototype.setEndDate = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.Game.prototype.clearEndDate = function() {
  this.setEndDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.Game.prototype.hasEndDate = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string logo = 12;
 * @return {string}
 */
proto.paralympics.games.v1.Game.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.Game.prototype.setLogo = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string blurb = 13;
 * @return {string}
 */
proto.paralympics.games.v1.Game.prototype.getBlurb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.Game.prototype.setBlurb = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.SortOption.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.SortOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.SortOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.SortOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.SortOption}
 */
proto.paralympics.games.v1.SortOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.SortOption;
  return proto.paralympics.games.v1.SortOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.SortOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.SortOption}
 */
proto.paralympics.games.v1.SortOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.paralympics.games.v1.SortField} */ (reader.readEnum());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {!proto.paralympics.games.v1.SortDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.SortOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.SortOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.SortOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.SortOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional SortField field = 1;
 * @return {!proto.paralympics.games.v1.SortField}
 */
proto.paralympics.games.v1.SortOption.prototype.getField = function() {
  return /** @type {!proto.paralympics.games.v1.SortField} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.paralympics.games.v1.SortField} value */
proto.paralympics.games.v1.SortOption.prototype.setField = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SortDirection direction = 2;
 * @return {!proto.paralympics.games.v1.SortDirection}
 */
proto.paralympics.games.v1.SortOption.prototype.getDirection = function() {
  return /** @type {!proto.paralympics.games.v1.SortDirection} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.paralympics.games.v1.SortDirection} value */
proto.paralympics.games.v1.SortOption.prototype.setDirection = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    promoted: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    season: jspb.Message.getFieldWithDefault(msg, 3, 0),
    deleted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    location: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.Filter}
 */
proto.paralympics.games.v1.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.Filter;
  return proto.paralympics.games.v1.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.Filter}
 */
proto.paralympics.games.v1.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPromoted(value);
      break;
    case 3:
      var value = /** @type {!proto.paralympics.games.v1.Season} */ (reader.readEnum());
      msg.setSeason(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPromoted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSeason();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * @return {boolean}
 */
proto.paralympics.games.v1.Filter.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.paralympics.games.v1.Filter.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool promoted = 2;
 * @return {boolean}
 */
proto.paralympics.games.v1.Filter.prototype.getPromoted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.paralympics.games.v1.Filter.prototype.setPromoted = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Season season = 3;
 * @return {!proto.paralympics.games.v1.Season}
 */
proto.paralympics.games.v1.Filter.prototype.getSeason = function() {
  return /** @type {!proto.paralympics.games.v1.Season} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.paralympics.games.v1.Season} value */
proto.paralympics.games.v1.Filter.prototype.setSeason = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool deleted = 4;
 * @return {boolean}
 */
proto.paralympics.games.v1.Filter.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.paralympics.games.v1.Filter.prototype.setDeleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string location = 5;
 * @return {string}
 */
proto.paralympics.games.v1.Filter.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.Filter.prototype.setLocation = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.GameByIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.GameByIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.GameByIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.GameByIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.GameByIDRequest}
 */
proto.paralympics.games.v1.GameByIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.GameByIDRequest;
  return proto.paralympics.games.v1.GameByIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.GameByIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.GameByIDRequest}
 */
proto.paralympics.games.v1.GameByIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.GameByIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.GameByIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.GameByIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.GameByIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.games.v1.GameByIDRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.GameByIDRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.GameBySlugRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.GameBySlugRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.GameBySlugRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.GameBySlugRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    slug: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.GameBySlugRequest}
 */
proto.paralympics.games.v1.GameBySlugRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.GameBySlugRequest;
  return proto.paralympics.games.v1.GameBySlugRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.GameBySlugRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.GameBySlugRequest}
 */
proto.paralympics.games.v1.GameBySlugRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.GameBySlugRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.GameBySlugRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.GameBySlugRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.GameBySlugRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string slug = 1;
 * @return {string}
 */
proto.paralympics.games.v1.GameBySlugRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.GameBySlugRequest.prototype.setSlug = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.Pagination.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.Pagination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.Pagination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.Pagination.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.Pagination}
 */
proto.paralympics.games.v1.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.Pagination;
  return proto.paralympics.games.v1.Pagination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.Pagination}
 */
proto.paralympics.games.v1.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 page = 1;
 * @return {number}
 */
proto.paralympics.games.v1.Pagination.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.paralympics.games.v1.Pagination.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 limit = 2;
 * @return {number}
 */
proto.paralympics.games.v1.Pagination.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.paralympics.games.v1.Pagination.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.games.v1.ListGamesRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.ListGamesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.ListGamesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.ListGamesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagination: (f = msg.getPagination()) && proto.paralympics.games.v1.Pagination.toObject(includeInstance, f),
    sortList: jspb.Message.toObjectList(msg.getSortList(),
    proto.paralympics.games.v1.SortOption.toObject, includeInstance),
    filter: (f = msg.getFilter()) && proto.paralympics.games.v1.Filter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.ListGamesRequest}
 */
proto.paralympics.games.v1.ListGamesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.ListGamesRequest;
  return proto.paralympics.games.v1.ListGamesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.ListGamesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.ListGamesRequest}
 */
proto.paralympics.games.v1.ListGamesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.games.v1.Pagination;
      reader.readMessage(value,proto.paralympics.games.v1.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 2:
      var value = new proto.paralympics.games.v1.SortOption;
      reader.readMessage(value,proto.paralympics.games.v1.SortOption.deserializeBinaryFromReader);
      msg.addSort(value);
      break;
    case 3:
      var value = new proto.paralympics.games.v1.Filter;
      reader.readMessage(value,proto.paralympics.games.v1.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.ListGamesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.ListGamesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.ListGamesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.paralympics.games.v1.Pagination.serializeBinaryToWriter
    );
  }
  f = message.getSortList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.paralympics.games.v1.SortOption.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.paralympics.games.v1.Filter.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pagination pagination = 1;
 * @return {?proto.paralympics.games.v1.Pagination}
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.getPagination = function() {
  return /** @type{?proto.paralympics.games.v1.Pagination} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.games.v1.Pagination, 1));
};


/** @param {?proto.paralympics.games.v1.Pagination|undefined} value */
proto.paralympics.games.v1.ListGamesRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SortOption sort = 2;
 * @return {!Array<!proto.paralympics.games.v1.SortOption>}
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.getSortList = function() {
  return /** @type{!Array<!proto.paralympics.games.v1.SortOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.paralympics.games.v1.SortOption, 2));
};


/** @param {!Array<!proto.paralympics.games.v1.SortOption>} value */
proto.paralympics.games.v1.ListGamesRequest.prototype.setSortList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.paralympics.games.v1.SortOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.games.v1.SortOption}
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.addSort = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.paralympics.games.v1.SortOption, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.clearSortList = function() {
  this.setSortList([]);
};


/**
 * optional Filter filter = 3;
 * @return {?proto.paralympics.games.v1.Filter}
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.getFilter = function() {
  return /** @type{?proto.paralympics.games.v1.Filter} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.games.v1.Filter, 3));
};


/** @param {?proto.paralympics.games.v1.Filter|undefined} value */
proto.paralympics.games.v1.ListGamesRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.ListGamesRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.games.v1.ListGamesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.ListGamesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.ListGamesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.ListGamesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.ListGamesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamesList: jspb.Message.toObjectList(msg.getGamesList(),
    proto.paralympics.games.v1.Game.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.ListGamesResponse}
 */
proto.paralympics.games.v1.ListGamesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.ListGamesResponse;
  return proto.paralympics.games.v1.ListGamesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.ListGamesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.ListGamesResponse}
 */
proto.paralympics.games.v1.ListGamesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.games.v1.Game;
      reader.readMessage(value,proto.paralympics.games.v1.Game.deserializeBinaryFromReader);
      msg.addGames(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.ListGamesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.ListGamesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.ListGamesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.ListGamesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.paralympics.games.v1.Game.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated Game games = 1;
 * @return {!Array<!proto.paralympics.games.v1.Game>}
 */
proto.paralympics.games.v1.ListGamesResponse.prototype.getGamesList = function() {
  return /** @type{!Array<!proto.paralympics.games.v1.Game>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.paralympics.games.v1.Game, 1));
};


/** @param {!Array<!proto.paralympics.games.v1.Game>} value */
proto.paralympics.games.v1.ListGamesResponse.prototype.setGamesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.paralympics.games.v1.Game=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.games.v1.Game}
 */
proto.paralympics.games.v1.ListGamesResponse.prototype.addGames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.paralympics.games.v1.Game, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.games.v1.ListGamesResponse.prototype.clearGamesList = function() {
  this.setGamesList([]);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.paralympics.games.v1.ListGamesResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.paralympics.games.v1.ListGamesResponse.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.FieldError.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.FieldError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.FieldError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.FieldError.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, 0),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.FieldError}
 */
proto.paralympics.games.v1.FieldError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.FieldError;
  return proto.paralympics.games.v1.FieldError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.FieldError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.FieldError}
 */
proto.paralympics.games.v1.FieldError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.paralympics.games.v1.Field} */ (reader.readEnum());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {!proto.paralympics.games.v1.ErrorCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.FieldError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.FieldError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.FieldError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.FieldError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Field field = 1;
 * @return {!proto.paralympics.games.v1.Field}
 */
proto.paralympics.games.v1.FieldError.prototype.getField = function() {
  return /** @type {!proto.paralympics.games.v1.Field} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.paralympics.games.v1.Field} value */
proto.paralympics.games.v1.FieldError.prototype.setField = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ErrorCode code = 2;
 * @return {!proto.paralympics.games.v1.ErrorCode}
 */
proto.paralympics.games.v1.FieldError.prototype.getCode = function() {
  return /** @type {!proto.paralympics.games.v1.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.paralympics.games.v1.ErrorCode} value */
proto.paralympics.games.v1.FieldError.prototype.setCode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.games.v1.ValidationError.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.ValidationError.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.ValidationError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.ValidationError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.ValidationError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.paralympics.games.v1.FieldError.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.ValidationError}
 */
proto.paralympics.games.v1.ValidationError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.ValidationError;
  return proto.paralympics.games.v1.ValidationError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.ValidationError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.ValidationError}
 */
proto.paralympics.games.v1.ValidationError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.games.v1.FieldError;
      reader.readMessage(value,proto.paralympics.games.v1.FieldError.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.ValidationError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.ValidationError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.ValidationError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.ValidationError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.paralympics.games.v1.FieldError.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FieldError errors = 1;
 * @return {!Array<!proto.paralympics.games.v1.FieldError>}
 */
proto.paralympics.games.v1.ValidationError.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.paralympics.games.v1.FieldError>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.paralympics.games.v1.FieldError, 1));
};


/** @param {!Array<!proto.paralympics.games.v1.FieldError>} value */
proto.paralympics.games.v1.ValidationError.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.paralympics.games.v1.FieldError=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.games.v1.FieldError}
 */
proto.paralympics.games.v1.ValidationError.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.paralympics.games.v1.FieldError, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.games.v1.ValidationError.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.ActiveGamesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.ActiveGamesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.ActiveGamesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.ActiveGamesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.ActiveGamesRequest}
 */
proto.paralympics.games.v1.ActiveGamesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.ActiveGamesRequest;
  return proto.paralympics.games.v1.ActiveGamesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.ActiveGamesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.ActiveGamesRequest}
 */
proto.paralympics.games.v1.ActiveGamesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.ActiveGamesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.ActiveGamesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.ActiveGamesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.ActiveGamesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.ActiveGamesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.ActiveGamesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.ActiveGamesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.ActiveGamesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    summer: (f = msg.getSummer()) && proto.paralympics.games.v1.Game.toObject(includeInstance, f),
    winter: (f = msg.getWinter()) && proto.paralympics.games.v1.Game.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.ActiveGamesResponse}
 */
proto.paralympics.games.v1.ActiveGamesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.ActiveGamesResponse;
  return proto.paralympics.games.v1.ActiveGamesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.ActiveGamesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.ActiveGamesResponse}
 */
proto.paralympics.games.v1.ActiveGamesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.games.v1.Game;
      reader.readMessage(value,proto.paralympics.games.v1.Game.deserializeBinaryFromReader);
      msg.setSummer(value);
      break;
    case 2:
      var value = new proto.paralympics.games.v1.Game;
      reader.readMessage(value,proto.paralympics.games.v1.Game.deserializeBinaryFromReader);
      msg.setWinter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.ActiveGamesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.ActiveGamesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.ActiveGamesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.ActiveGamesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSummer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.paralympics.games.v1.Game.serializeBinaryToWriter
    );
  }
  f = message.getWinter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.paralympics.games.v1.Game.serializeBinaryToWriter
    );
  }
};


/**
 * optional Game summer = 1;
 * @return {?proto.paralympics.games.v1.Game}
 */
proto.paralympics.games.v1.ActiveGamesResponse.prototype.getSummer = function() {
  return /** @type{?proto.paralympics.games.v1.Game} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.games.v1.Game, 1));
};


/** @param {?proto.paralympics.games.v1.Game|undefined} value */
proto.paralympics.games.v1.ActiveGamesResponse.prototype.setSummer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.ActiveGamesResponse.prototype.clearSummer = function() {
  this.setSummer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.ActiveGamesResponse.prototype.hasSummer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Game winter = 2;
 * @return {?proto.paralympics.games.v1.Game}
 */
proto.paralympics.games.v1.ActiveGamesResponse.prototype.getWinter = function() {
  return /** @type{?proto.paralympics.games.v1.Game} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.games.v1.Game, 2));
};


/** @param {?proto.paralympics.games.v1.Game|undefined} value */
proto.paralympics.games.v1.ActiveGamesResponse.prototype.setWinter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.ActiveGamesResponse.prototype.clearWinter = function() {
  this.setWinter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.ActiveGamesResponse.prototype.hasWinter = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.SetActiveGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.SetActiveGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.SetActiveGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.SetActiveGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.SetActiveGameRequest}
 */
proto.paralympics.games.v1.SetActiveGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.SetActiveGameRequest;
  return proto.paralympics.games.v1.SetActiveGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.SetActiveGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.SetActiveGameRequest}
 */
proto.paralympics.games.v1.SetActiveGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.SetActiveGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.SetActiveGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.SetActiveGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.SetActiveGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.games.v1.SetActiveGameRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.SetActiveGameRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.SetActiveGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.SetActiveGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.SetActiveGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.SetActiveGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.SetActiveGameResponse}
 */
proto.paralympics.games.v1.SetActiveGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.SetActiveGameResponse;
  return proto.paralympics.games.v1.SetActiveGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.SetActiveGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.SetActiveGameResponse}
 */
proto.paralympics.games.v1.SetActiveGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.SetActiveGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.SetActiveGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.SetActiveGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.SetActiveGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.PromoteGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.PromoteGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.PromoteGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PromoteGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.PromoteGameRequest}
 */
proto.paralympics.games.v1.PromoteGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.PromoteGameRequest;
  return proto.paralympics.games.v1.PromoteGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.PromoteGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.PromoteGameRequest}
 */
proto.paralympics.games.v1.PromoteGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.PromoteGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.PromoteGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.PromoteGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PromoteGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.games.v1.PromoteGameRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.PromoteGameRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.PromoteGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.PromoteGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.PromoteGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PromoteGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.PromoteGameResponse}
 */
proto.paralympics.games.v1.PromoteGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.PromoteGameResponse;
  return proto.paralympics.games.v1.PromoteGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.PromoteGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.PromoteGameResponse}
 */
proto.paralympics.games.v1.PromoteGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.PromoteGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.PromoteGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.PromoteGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PromoteGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.PromotedGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.PromotedGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.PromotedGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PromotedGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.PromotedGameRequest}
 */
proto.paralympics.games.v1.PromotedGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.PromotedGameRequest;
  return proto.paralympics.games.v1.PromotedGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.PromotedGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.PromotedGameRequest}
 */
proto.paralympics.games.v1.PromotedGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.PromotedGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.PromotedGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.PromotedGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PromotedGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.PromotedGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.PromotedGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.PromotedGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PromotedGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    game: (f = msg.getGame()) && proto.paralympics.games.v1.Game.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.PromotedGameResponse}
 */
proto.paralympics.games.v1.PromotedGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.PromotedGameResponse;
  return proto.paralympics.games.v1.PromotedGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.PromotedGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.PromotedGameResponse}
 */
proto.paralympics.games.v1.PromotedGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.games.v1.Game;
      reader.readMessage(value,proto.paralympics.games.v1.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.PromotedGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.PromotedGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.PromotedGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PromotedGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.paralympics.games.v1.Game.serializeBinaryToWriter
    );
  }
};


/**
 * optional Game game = 1;
 * @return {?proto.paralympics.games.v1.Game}
 */
proto.paralympics.games.v1.PromotedGameResponse.prototype.getGame = function() {
  return /** @type{?proto.paralympics.games.v1.Game} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.games.v1.Game, 1));
};


/** @param {?proto.paralympics.games.v1.Game|undefined} value */
proto.paralympics.games.v1.PromotedGameResponse.prototype.setGame = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.PromotedGameResponse.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.PromotedGameResponse.prototype.hasGame = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.games.v1.PinSportsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.PinSportsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.PinSportsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.PinSportsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PinSportsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sportsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.PinSportsRequest}
 */
proto.paralympics.games.v1.PinSportsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.PinSportsRequest;
  return proto.paralympics.games.v1.PinSportsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.PinSportsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.PinSportsRequest}
 */
proto.paralympics.games.v1.PinSportsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSports(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.PinSportsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.PinSportsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.PinSportsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PinSportsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSportsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.paralympics.games.v1.PinSportsRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.PinSportsRequest.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string sports = 2;
 * @return {!Array<string>}
 */
proto.paralympics.games.v1.PinSportsRequest.prototype.getSportsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.paralympics.games.v1.PinSportsRequest.prototype.setSportsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.paralympics.games.v1.PinSportsRequest.prototype.addSports = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.games.v1.PinSportsRequest.prototype.clearSportsList = function() {
  this.setSportsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.PinSportsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.PinSportsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.PinSportsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PinSportsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.PinSportsResponse}
 */
proto.paralympics.games.v1.PinSportsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.PinSportsResponse;
  return proto.paralympics.games.v1.PinSportsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.PinSportsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.PinSportsResponse}
 */
proto.paralympics.games.v1.PinSportsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.PinSportsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.PinSportsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.PinSportsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PinSportsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.RestoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.RestoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.RestoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.RestoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.RestoreRequest}
 */
proto.paralympics.games.v1.RestoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.RestoreRequest;
  return proto.paralympics.games.v1.RestoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.RestoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.RestoreRequest}
 */
proto.paralympics.games.v1.RestoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.RestoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.RestoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.RestoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.RestoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.games.v1.RestoreRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.RestoreRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.RestoreResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.RestoreResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.RestoreResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.RestoreResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    game: (f = msg.getGame()) && proto.paralympics.games.v1.Game.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.RestoreResponse}
 */
proto.paralympics.games.v1.RestoreResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.RestoreResponse;
  return proto.paralympics.games.v1.RestoreResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.RestoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.RestoreResponse}
 */
proto.paralympics.games.v1.RestoreResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.games.v1.Game;
      reader.readMessage(value,proto.paralympics.games.v1.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.RestoreResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.RestoreResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.RestoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.RestoreResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.paralympics.games.v1.Game.serializeBinaryToWriter
    );
  }
};


/**
 * optional Game game = 1;
 * @return {?proto.paralympics.games.v1.Game}
 */
proto.paralympics.games.v1.RestoreResponse.prototype.getGame = function() {
  return /** @type{?proto.paralympics.games.v1.Game} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.games.v1.Game, 1));
};


/** @param {?proto.paralympics.games.v1.Game|undefined} value */
proto.paralympics.games.v1.RestoreResponse.prototype.setGame = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.games.v1.RestoreResponse.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.games.v1.RestoreResponse.prototype.hasGame = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.PurgeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.PurgeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.PurgeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PurgeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.PurgeRequest}
 */
proto.paralympics.games.v1.PurgeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.PurgeRequest;
  return proto.paralympics.games.v1.PurgeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.PurgeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.PurgeRequest}
 */
proto.paralympics.games.v1.PurgeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.PurgeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.PurgeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.PurgeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PurgeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.games.v1.PurgeRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.games.v1.PurgeRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.games.v1.PurgeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.games.v1.PurgeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.games.v1.PurgeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PurgeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.games.v1.PurgeResponse}
 */
proto.paralympics.games.v1.PurgeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.games.v1.PurgeResponse;
  return proto.paralympics.games.v1.PurgeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.games.v1.PurgeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.games.v1.PurgeResponse}
 */
proto.paralympics.games.v1.PurgeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.games.v1.PurgeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.games.v1.PurgeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.games.v1.PurgeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.games.v1.PurgeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.paralympics.games.v1.Season = {
  NONE: 0,
  WINTER: 1,
  SUMMER: 2
};

/**
 * @enum {number}
 */
proto.paralympics.games.v1.SortField = {
  CREATE_DATE: 0,
  UPDATE_DATE: 1,
  DELETE_DATE: 2,
  LOCATION: 3
};

/**
 * @enum {number}
 */
proto.paralympics.games.v1.SortDirection = {
  ASC: 0,
  DSC: 1
};

/**
 * @enum {number}
 */
proto.paralympics.games.v1.Field = {
  GAMEID: 0,
  GAMESLUG: 1,
  GAMELOCATION: 2,
  GAMESEASON: 3,
  GAMEACTIVE: 4,
  GAMEPROMOTED: 5,
  GAMESTARTDATE: 6,
  GAMEENDDATE: 7,
  GAMELOGO: 8,
  GAMEBLURB: 9
};

/**
 * @enum {number}
 */
proto.paralympics.games.v1.ErrorCode = {
  REQUIRED: 0,
  INVALIDUUIDV4: 1,
  INVALIDURI: 2
};

goog.object.extend(exports, proto.paralympics.games.v1);
