// source: athletes/v1/athlete.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var content_v1_content_pb = require('../../content/v1/content_pb.js');
goog.object.extend(proto, content_v1_content_pb);
var content_v1_social_pb = require('../../content/v1/social_pb.js');
goog.object.extend(proto, content_v1_social_pb);
var sports_v1_sport_pb = require('../../sports/v1/sport_pb.js');
goog.object.extend(proto, sports_v1_sport_pb);
var games_v1_game_pb = require('../../games/v1/game_pb.js');
goog.object.extend(proto, games_v1_game_pb);
goog.exportSymbol('proto.paralympics.athletes.v1.Athlete', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.AthleteByIDRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.AthleteBySlugRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.AthleteContentRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.ErrorCode', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.FeaturedFilter', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.FeaturedRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.FeaturedResponse', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.Field', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.FieldError', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.Filter', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.GameFilter', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.ListAthletesRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.ListAthletesResponse', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.Pagination', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.PinGamesRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.PinGamesResponse', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.PinSportsRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.PinSportsResponse', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.PinnedGamesRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.PinnedGamesResponse', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.PinnedSportsRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.PinnedSportsResponse', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.PurgeRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.PurgeResponse', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.RestoreRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.RestoreResponse', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.SearchRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.SearchResult', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.SortDirection', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.SortField', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.SortOption', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.ToggleFeaturedRequest', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.ToggleFeaturedResponse', null, global);
goog.exportSymbol('proto.paralympics.athletes.v1.ValidationError', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.FieldError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.FieldError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.FieldError.displayName = 'proto.paralympics.athletes.v1.FieldError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.ValidationError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.athletes.v1.ValidationError.repeatedFields_, null);
};
goog.inherits(proto.paralympics.athletes.v1.ValidationError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.ValidationError.displayName = 'proto.paralympics.athletes.v1.ValidationError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.Athlete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.athletes.v1.Athlete.repeatedFields_, null);
};
goog.inherits(proto.paralympics.athletes.v1.Athlete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.Athlete.displayName = 'proto.paralympics.athletes.v1.Athlete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.SortOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.SortOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.SortOption.displayName = 'proto.paralympics.athletes.v1.SortOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.GameFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.GameFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.GameFilter.displayName = 'proto.paralympics.athletes.v1.GameFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.Filter.displayName = 'proto.paralympics.athletes.v1.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.Pagination.displayName = 'proto.paralympics.athletes.v1.Pagination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.ListAthletesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.athletes.v1.ListAthletesRequest.repeatedFields_, null);
};
goog.inherits(proto.paralympics.athletes.v1.ListAthletesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.ListAthletesRequest.displayName = 'proto.paralympics.athletes.v1.ListAthletesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.AthleteByIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.AthleteByIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.AthleteByIDRequest.displayName = 'proto.paralympics.athletes.v1.AthleteByIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.AthleteBySlugRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.AthleteBySlugRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.AthleteBySlugRequest.displayName = 'proto.paralympics.athletes.v1.AthleteBySlugRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.AthleteContentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.AthleteContentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.AthleteContentRequest.displayName = 'proto.paralympics.athletes.v1.AthleteContentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.ListAthletesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.athletes.v1.ListAthletesResponse.repeatedFields_, null);
};
goog.inherits(proto.paralympics.athletes.v1.ListAthletesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.ListAthletesResponse.displayName = 'proto.paralympics.athletes.v1.ListAthletesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.PinSportsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.athletes.v1.PinSportsRequest.repeatedFields_, null);
};
goog.inherits(proto.paralympics.athletes.v1.PinSportsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.PinSportsRequest.displayName = 'proto.paralympics.athletes.v1.PinSportsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.PinSportsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.PinSportsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.PinSportsResponse.displayName = 'proto.paralympics.athletes.v1.PinSportsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.PinnedSportsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.PinnedSportsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.PinnedSportsRequest.displayName = 'proto.paralympics.athletes.v1.PinnedSportsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.PinnedSportsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.athletes.v1.PinnedSportsResponse.repeatedFields_, null);
};
goog.inherits(proto.paralympics.athletes.v1.PinnedSportsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.PinnedSportsResponse.displayName = 'proto.paralympics.athletes.v1.PinnedSportsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.PinGamesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.athletes.v1.PinGamesRequest.repeatedFields_, null);
};
goog.inherits(proto.paralympics.athletes.v1.PinGamesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.PinGamesRequest.displayName = 'proto.paralympics.athletes.v1.PinGamesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.PinGamesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.PinGamesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.PinGamesResponse.displayName = 'proto.paralympics.athletes.v1.PinGamesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.PinnedGamesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.PinnedGamesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.PinnedGamesRequest.displayName = 'proto.paralympics.athletes.v1.PinnedGamesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.PinnedGamesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.athletes.v1.PinnedGamesResponse.repeatedFields_, null);
};
goog.inherits(proto.paralympics.athletes.v1.PinnedGamesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.PinnedGamesResponse.displayName = 'proto.paralympics.athletes.v1.PinnedGamesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.SearchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.SearchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.SearchRequest.displayName = 'proto.paralympics.athletes.v1.SearchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.SearchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.SearchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.SearchResult.displayName = 'proto.paralympics.athletes.v1.SearchResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.ToggleFeaturedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.ToggleFeaturedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.ToggleFeaturedRequest.displayName = 'proto.paralympics.athletes.v1.ToggleFeaturedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.ToggleFeaturedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.ToggleFeaturedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.ToggleFeaturedResponse.displayName = 'proto.paralympics.athletes.v1.ToggleFeaturedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.FeaturedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.FeaturedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.FeaturedRequest.displayName = 'proto.paralympics.athletes.v1.FeaturedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.FeaturedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.athletes.v1.FeaturedResponse.repeatedFields_, null);
};
goog.inherits(proto.paralympics.athletes.v1.FeaturedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.FeaturedResponse.displayName = 'proto.paralympics.athletes.v1.FeaturedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.RestoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.RestoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.RestoreRequest.displayName = 'proto.paralympics.athletes.v1.RestoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.RestoreResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.RestoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.RestoreResponse.displayName = 'proto.paralympics.athletes.v1.RestoreResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.PurgeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.PurgeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.PurgeRequest.displayName = 'proto.paralympics.athletes.v1.PurgeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.athletes.v1.PurgeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.athletes.v1.PurgeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.athletes.v1.PurgeResponse.displayName = 'proto.paralympics.athletes.v1.PurgeResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.FieldError.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.FieldError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.FieldError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.FieldError.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, 0),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.FieldError}
 */
proto.paralympics.athletes.v1.FieldError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.FieldError;
  return proto.paralympics.athletes.v1.FieldError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.FieldError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.FieldError}
 */
proto.paralympics.athletes.v1.FieldError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.paralympics.athletes.v1.Field} */ (reader.readEnum());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {!proto.paralympics.athletes.v1.ErrorCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.FieldError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.FieldError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.FieldError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.FieldError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Field field = 1;
 * @return {!proto.paralympics.athletes.v1.Field}
 */
proto.paralympics.athletes.v1.FieldError.prototype.getField = function() {
  return /** @type {!proto.paralympics.athletes.v1.Field} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.paralympics.athletes.v1.Field} value */
proto.paralympics.athletes.v1.FieldError.prototype.setField = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ErrorCode code = 2;
 * @return {!proto.paralympics.athletes.v1.ErrorCode}
 */
proto.paralympics.athletes.v1.FieldError.prototype.getCode = function() {
  return /** @type {!proto.paralympics.athletes.v1.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.paralympics.athletes.v1.ErrorCode} value */
proto.paralympics.athletes.v1.FieldError.prototype.setCode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.athletes.v1.ValidationError.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.ValidationError.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.ValidationError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.ValidationError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.ValidationError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.paralympics.athletes.v1.FieldError.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.ValidationError}
 */
proto.paralympics.athletes.v1.ValidationError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.ValidationError;
  return proto.paralympics.athletes.v1.ValidationError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.ValidationError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.ValidationError}
 */
proto.paralympics.athletes.v1.ValidationError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.athletes.v1.FieldError;
      reader.readMessage(value,proto.paralympics.athletes.v1.FieldError.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.ValidationError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.ValidationError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.ValidationError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.ValidationError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.paralympics.athletes.v1.FieldError.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FieldError errors = 1;
 * @return {!Array<!proto.paralympics.athletes.v1.FieldError>}
 */
proto.paralympics.athletes.v1.ValidationError.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.paralympics.athletes.v1.FieldError>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.paralympics.athletes.v1.FieldError, 1));
};


/** @param {!Array<!proto.paralympics.athletes.v1.FieldError>} value */
proto.paralympics.athletes.v1.ValidationError.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.paralympics.athletes.v1.FieldError=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.athletes.v1.FieldError}
 */
proto.paralympics.athletes.v1.ValidationError.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.paralympics.athletes.v1.FieldError, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.athletes.v1.ValidationError.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.athletes.v1.Athlete.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.Athlete.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.Athlete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.Athlete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.Athlete.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createDate: (f = msg.getCreateDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updateDate: (f = msg.getUpdateDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    deleteDate: (f = msg.getDeleteDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    region: jspb.Message.getFieldWithDefault(msg, 7, ""),
    dob: (f = msg.getDob()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    pb_class: jspb.Message.getFieldWithDefault(msg, 9, ""),
    socialProfilesList: jspb.Message.toObjectList(msg.getSocialProfilesList(),
    content_v1_social_pb.SocialProfile.toObject, includeInstance),
    imgProfile: (f = msg.getImgProfile()) && content_v1_content_pb.Image.toObject(includeInstance, f),
    imgHero: (f = msg.getImgHero()) && content_v1_content_pb.Image.toObject(includeInstance, f),
    imgHeroAlt: jspb.Message.getFieldWithDefault(msg, 13, ""),
    featured: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.Athlete}
 */
proto.paralympics.athletes.v1.Athlete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.Athlete;
  return proto.paralympics.athletes.v1.Athlete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.Athlete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.Athlete}
 */
proto.paralympics.athletes.v1.Athlete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateDate(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdateDate(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDeleteDate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDob(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setClass(value);
      break;
    case 10:
      var value = new content_v1_social_pb.SocialProfile;
      reader.readMessage(value,content_v1_social_pb.SocialProfile.deserializeBinaryFromReader);
      msg.addSocialProfiles(value);
      break;
    case 11:
      var value = new content_v1_content_pb.Image;
      reader.readMessage(value,content_v1_content_pb.Image.deserializeBinaryFromReader);
      msg.setImgProfile(value);
      break;
    case 12:
      var value = new content_v1_content_pb.Image;
      reader.readMessage(value,content_v1_content_pb.Image.deserializeBinaryFromReader);
      msg.setImgHero(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgHeroAlt(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFeatured(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.Athlete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.Athlete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.Athlete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.Athlete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreateDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdateDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDeleteDate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDob();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getClass();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSocialProfilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      content_v1_social_pb.SocialProfile.serializeBinaryToWriter
    );
  }
  f = message.getImgProfile();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      content_v1_content_pb.Image.serializeBinaryToWriter
    );
  }
  f = message.getImgHero();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      content_v1_content_pb.Image.serializeBinaryToWriter
    );
  }
  f = message.getImgHeroAlt();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getFeatured();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.Athlete.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.Athlete.prototype.setSlug = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp create_date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getCreateDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.athletes.v1.Athlete.prototype.setCreateDate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.Athlete.prototype.clearCreateDate = function() {
  this.setCreateDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.Athlete.prototype.hasCreateDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp update_date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getUpdateDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.athletes.v1.Athlete.prototype.setUpdateDate = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.Athlete.prototype.clearUpdateDate = function() {
  this.setUpdateDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.Athlete.prototype.hasUpdateDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp delete_date = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getDeleteDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.athletes.v1.Athlete.prototype.setDeleteDate = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.Athlete.prototype.clearDeleteDate = function() {
  this.setDeleteDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.Athlete.prototype.hasDeleteDate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.Athlete.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string region = 7;
 * @return {string}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.Athlete.prototype.setRegion = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp dob = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getDob = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.athletes.v1.Athlete.prototype.setDob = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.Athlete.prototype.clearDob = function() {
  this.setDob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.Athlete.prototype.hasDob = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string class = 9;
 * @return {string}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.Athlete.prototype.setClass = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated paralympics.content.v1.SocialProfile social_profiles = 10;
 * @return {!Array<!proto.paralympics.content.v1.SocialProfile>}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getSocialProfilesList = function() {
  return /** @type{!Array<!proto.paralympics.content.v1.SocialProfile>} */ (
    jspb.Message.getRepeatedWrapperField(this, content_v1_social_pb.SocialProfile, 10));
};


/** @param {!Array<!proto.paralympics.content.v1.SocialProfile>} value */
proto.paralympics.athletes.v1.Athlete.prototype.setSocialProfilesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.paralympics.content.v1.SocialProfile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.content.v1.SocialProfile}
 */
proto.paralympics.athletes.v1.Athlete.prototype.addSocialProfiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.paralympics.content.v1.SocialProfile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.athletes.v1.Athlete.prototype.clearSocialProfilesList = function() {
  this.setSocialProfilesList([]);
};


/**
 * optional paralympics.content.v1.Image img_profile = 11;
 * @return {?proto.paralympics.content.v1.Image}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getImgProfile = function() {
  return /** @type{?proto.paralympics.content.v1.Image} */ (
    jspb.Message.getWrapperField(this, content_v1_content_pb.Image, 11));
};


/** @param {?proto.paralympics.content.v1.Image|undefined} value */
proto.paralympics.athletes.v1.Athlete.prototype.setImgProfile = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.Athlete.prototype.clearImgProfile = function() {
  this.setImgProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.Athlete.prototype.hasImgProfile = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional paralympics.content.v1.Image img_hero = 12;
 * @return {?proto.paralympics.content.v1.Image}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getImgHero = function() {
  return /** @type{?proto.paralympics.content.v1.Image} */ (
    jspb.Message.getWrapperField(this, content_v1_content_pb.Image, 12));
};


/** @param {?proto.paralympics.content.v1.Image|undefined} value */
proto.paralympics.athletes.v1.Athlete.prototype.setImgHero = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.Athlete.prototype.clearImgHero = function() {
  this.setImgHero(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.Athlete.prototype.hasImgHero = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string img_hero_alt = 13;
 * @return {string}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getImgHeroAlt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.Athlete.prototype.setImgHeroAlt = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bool featured = 14;
 * @return {boolean}
 */
proto.paralympics.athletes.v1.Athlete.prototype.getFeatured = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.paralympics.athletes.v1.Athlete.prototype.setFeatured = function(value) {
  jspb.Message.setProto3BooleanField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.SortOption.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.SortOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.SortOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.SortOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.SortOption}
 */
proto.paralympics.athletes.v1.SortOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.SortOption;
  return proto.paralympics.athletes.v1.SortOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.SortOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.SortOption}
 */
proto.paralympics.athletes.v1.SortOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.paralympics.athletes.v1.SortField} */ (reader.readEnum());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {!proto.paralympics.athletes.v1.SortDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.SortOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.SortOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.SortOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.SortOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional SortField field = 1;
 * @return {!proto.paralympics.athletes.v1.SortField}
 */
proto.paralympics.athletes.v1.SortOption.prototype.getField = function() {
  return /** @type {!proto.paralympics.athletes.v1.SortField} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.paralympics.athletes.v1.SortField} value */
proto.paralympics.athletes.v1.SortOption.prototype.setField = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SortDirection direction = 2;
 * @return {!proto.paralympics.athletes.v1.SortDirection}
 */
proto.paralympics.athletes.v1.SortOption.prototype.getDirection = function() {
  return /** @type {!proto.paralympics.athletes.v1.SortDirection} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.paralympics.athletes.v1.SortDirection} value */
proto.paralympics.athletes.v1.SortOption.prototype.setDirection = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.GameFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.GameFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.GameFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.GameFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.GameFilter}
 */
proto.paralympics.athletes.v1.GameFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.GameFilter;
  return proto.paralympics.athletes.v1.GameFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.GameFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.GameFilter}
 */
proto.paralympics.athletes.v1.GameFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.GameFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.GameFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.GameFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.GameFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.GameFilter.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.GameFilter.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool active = 2;
 * @return {boolean}
 */
proto.paralympics.athletes.v1.GameFilter.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.paralympics.athletes.v1.GameFilter.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    sportId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    game: (f = msg.getGame()) && proto.paralympics.athletes.v1.GameFilter.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deleted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    featured: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.Filter}
 */
proto.paralympics.athletes.v1.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.Filter;
  return proto.paralympics.athletes.v1.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.Filter}
 */
proto.paralympics.athletes.v1.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSportId(value);
      break;
    case 2:
      var value = new proto.paralympics.athletes.v1.GameFilter;
      reader.readMessage(value,proto.paralympics.athletes.v1.GameFilter.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 5:
      var value = /** @type {!proto.paralympics.athletes.v1.FeaturedFilter} */ (reader.readEnum());
      msg.setFeatured(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSportId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.paralympics.athletes.v1.GameFilter.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFeatured();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string sport_id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.Filter.prototype.getSportId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.Filter.prototype.setSportId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional GameFilter game = 2;
 * @return {?proto.paralympics.athletes.v1.GameFilter}
 */
proto.paralympics.athletes.v1.Filter.prototype.getGame = function() {
  return /** @type{?proto.paralympics.athletes.v1.GameFilter} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.athletes.v1.GameFilter, 2));
};


/** @param {?proto.paralympics.athletes.v1.GameFilter|undefined} value */
proto.paralympics.athletes.v1.Filter.prototype.setGame = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.Filter.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.Filter.prototype.hasGame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.paralympics.athletes.v1.Filter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.Filter.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool deleted = 4;
 * @return {boolean}
 */
proto.paralympics.athletes.v1.Filter.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.paralympics.athletes.v1.Filter.prototype.setDeleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional FeaturedFilter featured = 5;
 * @return {!proto.paralympics.athletes.v1.FeaturedFilter}
 */
proto.paralympics.athletes.v1.Filter.prototype.getFeatured = function() {
  return /** @type {!proto.paralympics.athletes.v1.FeaturedFilter} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.paralympics.athletes.v1.FeaturedFilter} value */
proto.paralympics.athletes.v1.Filter.prototype.setFeatured = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.Pagination.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.Pagination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.Pagination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.Pagination.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.Pagination}
 */
proto.paralympics.athletes.v1.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.Pagination;
  return proto.paralympics.athletes.v1.Pagination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.Pagination}
 */
proto.paralympics.athletes.v1.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 page = 1;
 * @return {number}
 */
proto.paralympics.athletes.v1.Pagination.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.paralympics.athletes.v1.Pagination.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 limit = 2;
 * @return {number}
 */
proto.paralympics.athletes.v1.Pagination.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.paralympics.athletes.v1.Pagination.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.athletes.v1.ListAthletesRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.ListAthletesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.ListAthletesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.ListAthletesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagination: (f = msg.getPagination()) && proto.paralympics.athletes.v1.Pagination.toObject(includeInstance, f),
    sortList: jspb.Message.toObjectList(msg.getSortList(),
    proto.paralympics.athletes.v1.SortOption.toObject, includeInstance),
    filter: (f = msg.getFilter()) && proto.paralympics.athletes.v1.Filter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.ListAthletesRequest}
 */
proto.paralympics.athletes.v1.ListAthletesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.ListAthletesRequest;
  return proto.paralympics.athletes.v1.ListAthletesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.ListAthletesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.ListAthletesRequest}
 */
proto.paralympics.athletes.v1.ListAthletesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.athletes.v1.Pagination;
      reader.readMessage(value,proto.paralympics.athletes.v1.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 2:
      var value = new proto.paralympics.athletes.v1.SortOption;
      reader.readMessage(value,proto.paralympics.athletes.v1.SortOption.deserializeBinaryFromReader);
      msg.addSort(value);
      break;
    case 3:
      var value = new proto.paralympics.athletes.v1.Filter;
      reader.readMessage(value,proto.paralympics.athletes.v1.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.ListAthletesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.ListAthletesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.ListAthletesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.paralympics.athletes.v1.Pagination.serializeBinaryToWriter
    );
  }
  f = message.getSortList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.paralympics.athletes.v1.SortOption.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.paralympics.athletes.v1.Filter.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pagination pagination = 1;
 * @return {?proto.paralympics.athletes.v1.Pagination}
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.getPagination = function() {
  return /** @type{?proto.paralympics.athletes.v1.Pagination} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.athletes.v1.Pagination, 1));
};


/** @param {?proto.paralympics.athletes.v1.Pagination|undefined} value */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SortOption sort = 2;
 * @return {!Array<!proto.paralympics.athletes.v1.SortOption>}
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.getSortList = function() {
  return /** @type{!Array<!proto.paralympics.athletes.v1.SortOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.paralympics.athletes.v1.SortOption, 2));
};


/** @param {!Array<!proto.paralympics.athletes.v1.SortOption>} value */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.setSortList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.paralympics.athletes.v1.SortOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.athletes.v1.SortOption}
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.addSort = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.paralympics.athletes.v1.SortOption, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.clearSortList = function() {
  this.setSortList([]);
};


/**
 * optional Filter filter = 3;
 * @return {?proto.paralympics.athletes.v1.Filter}
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.getFilter = function() {
  return /** @type{?proto.paralympics.athletes.v1.Filter} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.athletes.v1.Filter, 3));
};


/** @param {?proto.paralympics.athletes.v1.Filter|undefined} value */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.ListAthletesRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.AthleteByIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.AthleteByIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.AthleteByIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.AthleteByIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.AthleteByIDRequest}
 */
proto.paralympics.athletes.v1.AthleteByIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.AthleteByIDRequest;
  return proto.paralympics.athletes.v1.AthleteByIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.AthleteByIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.AthleteByIDRequest}
 */
proto.paralympics.athletes.v1.AthleteByIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.AthleteByIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.AthleteByIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.AthleteByIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.AthleteByIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.AthleteByIDRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.AthleteByIDRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.AthleteBySlugRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.AthleteBySlugRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.AthleteBySlugRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.AthleteBySlugRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    slug: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.AthleteBySlugRequest}
 */
proto.paralympics.athletes.v1.AthleteBySlugRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.AthleteBySlugRequest;
  return proto.paralympics.athletes.v1.AthleteBySlugRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.AthleteBySlugRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.AthleteBySlugRequest}
 */
proto.paralympics.athletes.v1.AthleteBySlugRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.AthleteBySlugRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.AthleteBySlugRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.AthleteBySlugRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.AthleteBySlugRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string slug = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.AthleteBySlugRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.AthleteBySlugRequest.prototype.setSlug = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.AthleteContentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.AthleteContentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.AthleteContentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.AthleteContentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    athleteId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    athleteSlug: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.AthleteContentRequest}
 */
proto.paralympics.athletes.v1.AthleteContentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.AthleteContentRequest;
  return proto.paralympics.athletes.v1.AthleteContentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.AthleteContentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.AthleteContentRequest}
 */
proto.paralympics.athletes.v1.AthleteContentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAthleteId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAthleteSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.AthleteContentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.AthleteContentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.AthleteContentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.AthleteContentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAthleteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAthleteSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string athlete_id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.AthleteContentRequest.prototype.getAthleteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.AthleteContentRequest.prototype.setAthleteId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string athlete_slug = 2;
 * @return {string}
 */
proto.paralympics.athletes.v1.AthleteContentRequest.prototype.getAthleteSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.AthleteContentRequest.prototype.setAthleteSlug = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.athletes.v1.ListAthletesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.ListAthletesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.ListAthletesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.ListAthletesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.ListAthletesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    athletesList: jspb.Message.toObjectList(msg.getAthletesList(),
    proto.paralympics.athletes.v1.Athlete.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.ListAthletesResponse}
 */
proto.paralympics.athletes.v1.ListAthletesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.ListAthletesResponse;
  return proto.paralympics.athletes.v1.ListAthletesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.ListAthletesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.ListAthletesResponse}
 */
proto.paralympics.athletes.v1.ListAthletesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.athletes.v1.Athlete;
      reader.readMessage(value,proto.paralympics.athletes.v1.Athlete.deserializeBinaryFromReader);
      msg.addAthletes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.ListAthletesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.ListAthletesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.ListAthletesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.ListAthletesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAthletesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.paralympics.athletes.v1.Athlete.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated Athlete athletes = 1;
 * @return {!Array<!proto.paralympics.athletes.v1.Athlete>}
 */
proto.paralympics.athletes.v1.ListAthletesResponse.prototype.getAthletesList = function() {
  return /** @type{!Array<!proto.paralympics.athletes.v1.Athlete>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.paralympics.athletes.v1.Athlete, 1));
};


/** @param {!Array<!proto.paralympics.athletes.v1.Athlete>} value */
proto.paralympics.athletes.v1.ListAthletesResponse.prototype.setAthletesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.paralympics.athletes.v1.Athlete=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.athletes.v1.Athlete}
 */
proto.paralympics.athletes.v1.ListAthletesResponse.prototype.addAthletes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.paralympics.athletes.v1.Athlete, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.athletes.v1.ListAthletesResponse.prototype.clearAthletesList = function() {
  this.setAthletesList([]);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.paralympics.athletes.v1.ListAthletesResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.paralympics.athletes.v1.ListAthletesResponse.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.athletes.v1.PinSportsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.PinSportsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.PinSportsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.PinSportsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinSportsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sportsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.PinSportsRequest}
 */
proto.paralympics.athletes.v1.PinSportsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.PinSportsRequest;
  return proto.paralympics.athletes.v1.PinSportsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.PinSportsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.PinSportsRequest}
 */
proto.paralympics.athletes.v1.PinSportsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSports(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.PinSportsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.PinSportsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.PinSportsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinSportsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSportsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.PinSportsRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.PinSportsRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string sports = 2;
 * @return {!Array<string>}
 */
proto.paralympics.athletes.v1.PinSportsRequest.prototype.getSportsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.paralympics.athletes.v1.PinSportsRequest.prototype.setSportsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.paralympics.athletes.v1.PinSportsRequest.prototype.addSports = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.athletes.v1.PinSportsRequest.prototype.clearSportsList = function() {
  this.setSportsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.PinSportsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.PinSportsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.PinSportsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinSportsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.PinSportsResponse}
 */
proto.paralympics.athletes.v1.PinSportsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.PinSportsResponse;
  return proto.paralympics.athletes.v1.PinSportsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.PinSportsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.PinSportsResponse}
 */
proto.paralympics.athletes.v1.PinSportsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.PinSportsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.PinSportsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.PinSportsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinSportsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.PinnedSportsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.PinnedSportsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.PinnedSportsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinnedSportsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.PinnedSportsRequest}
 */
proto.paralympics.athletes.v1.PinnedSportsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.PinnedSportsRequest;
  return proto.paralympics.athletes.v1.PinnedSportsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.PinnedSportsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.PinnedSportsRequest}
 */
proto.paralympics.athletes.v1.PinnedSportsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.PinnedSportsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.PinnedSportsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.PinnedSportsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinnedSportsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.PinnedSportsRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.PinnedSportsRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.athletes.v1.PinnedSportsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.PinnedSportsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.PinnedSportsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.PinnedSportsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinnedSportsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sportsList: jspb.Message.toObjectList(msg.getSportsList(),
    sports_v1_sport_pb.Sport.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.PinnedSportsResponse}
 */
proto.paralympics.athletes.v1.PinnedSportsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.PinnedSportsResponse;
  return proto.paralympics.athletes.v1.PinnedSportsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.PinnedSportsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.PinnedSportsResponse}
 */
proto.paralympics.athletes.v1.PinnedSportsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new sports_v1_sport_pb.Sport;
      reader.readMessage(value,sports_v1_sport_pb.Sport.deserializeBinaryFromReader);
      msg.addSports(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.PinnedSportsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.PinnedSportsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.PinnedSportsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinnedSportsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSportsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      sports_v1_sport_pb.Sport.serializeBinaryToWriter
    );
  }
};


/**
 * repeated paralympics.sports.v1.Sport sports = 1;
 * @return {!Array<!proto.paralympics.sports.v1.Sport>}
 */
proto.paralympics.athletes.v1.PinnedSportsResponse.prototype.getSportsList = function() {
  return /** @type{!Array<!proto.paralympics.sports.v1.Sport>} */ (
    jspb.Message.getRepeatedWrapperField(this, sports_v1_sport_pb.Sport, 1));
};


/** @param {!Array<!proto.paralympics.sports.v1.Sport>} value */
proto.paralympics.athletes.v1.PinnedSportsResponse.prototype.setSportsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.paralympics.sports.v1.Sport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.sports.v1.Sport}
 */
proto.paralympics.athletes.v1.PinnedSportsResponse.prototype.addSports = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.paralympics.sports.v1.Sport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.athletes.v1.PinnedSportsResponse.prototype.clearSportsList = function() {
  this.setSportsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.athletes.v1.PinGamesRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.PinGamesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.PinGamesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.PinGamesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinGamesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.PinGamesRequest}
 */
proto.paralympics.athletes.v1.PinGamesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.PinGamesRequest;
  return proto.paralympics.athletes.v1.PinGamesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.PinGamesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.PinGamesRequest}
 */
proto.paralympics.athletes.v1.PinGamesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addGames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.PinGamesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.PinGamesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.PinGamesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinGamesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.PinGamesRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.PinGamesRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string games = 2;
 * @return {!Array<string>}
 */
proto.paralympics.athletes.v1.PinGamesRequest.prototype.getGamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.paralympics.athletes.v1.PinGamesRequest.prototype.setGamesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.paralympics.athletes.v1.PinGamesRequest.prototype.addGames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.athletes.v1.PinGamesRequest.prototype.clearGamesList = function() {
  this.setGamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.PinGamesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.PinGamesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.PinGamesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinGamesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.PinGamesResponse}
 */
proto.paralympics.athletes.v1.PinGamesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.PinGamesResponse;
  return proto.paralympics.athletes.v1.PinGamesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.PinGamesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.PinGamesResponse}
 */
proto.paralympics.athletes.v1.PinGamesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.PinGamesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.PinGamesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.PinGamesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinGamesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.PinnedGamesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.PinnedGamesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.PinnedGamesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinnedGamesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.PinnedGamesRequest}
 */
proto.paralympics.athletes.v1.PinnedGamesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.PinnedGamesRequest;
  return proto.paralympics.athletes.v1.PinnedGamesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.PinnedGamesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.PinnedGamesRequest}
 */
proto.paralympics.athletes.v1.PinnedGamesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.PinnedGamesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.PinnedGamesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.PinnedGamesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinnedGamesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.PinnedGamesRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.PinnedGamesRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.athletes.v1.PinnedGamesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.PinnedGamesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.PinnedGamesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.PinnedGamesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinnedGamesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamesList: jspb.Message.toObjectList(msg.getGamesList(),
    games_v1_game_pb.Game.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.PinnedGamesResponse}
 */
proto.paralympics.athletes.v1.PinnedGamesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.PinnedGamesResponse;
  return proto.paralympics.athletes.v1.PinnedGamesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.PinnedGamesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.PinnedGamesResponse}
 */
proto.paralympics.athletes.v1.PinnedGamesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new games_v1_game_pb.Game;
      reader.readMessage(value,games_v1_game_pb.Game.deserializeBinaryFromReader);
      msg.addGames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.PinnedGamesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.PinnedGamesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.PinnedGamesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PinnedGamesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      games_v1_game_pb.Game.serializeBinaryToWriter
    );
  }
};


/**
 * repeated paralympics.games.v1.Game games = 1;
 * @return {!Array<!proto.paralympics.games.v1.Game>}
 */
proto.paralympics.athletes.v1.PinnedGamesResponse.prototype.getGamesList = function() {
  return /** @type{!Array<!proto.paralympics.games.v1.Game>} */ (
    jspb.Message.getRepeatedWrapperField(this, games_v1_game_pb.Game, 1));
};


/** @param {!Array<!proto.paralympics.games.v1.Game>} value */
proto.paralympics.athletes.v1.PinnedGamesResponse.prototype.setGamesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.paralympics.games.v1.Game=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.games.v1.Game}
 */
proto.paralympics.athletes.v1.PinnedGamesResponse.prototype.addGames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.paralympics.games.v1.Game, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.athletes.v1.PinnedGamesResponse.prototype.clearGamesList = function() {
  this.setGamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.SearchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.SearchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.SearchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.SearchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.SearchRequest}
 */
proto.paralympics.athletes.v1.SearchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.SearchRequest;
  return proto.paralympics.athletes.v1.SearchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.SearchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.SearchRequest}
 */
proto.paralympics.athletes.v1.SearchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.SearchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.SearchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.SearchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.SearchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.SearchRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.SearchRequest.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.paralympics.athletes.v1.SearchRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.paralympics.athletes.v1.SearchRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.SearchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.SearchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.SearchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.SearchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    athlete: (f = msg.getAthlete()) && proto.paralympics.athletes.v1.Athlete.toObject(includeInstance, f),
    weighting: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.SearchResult}
 */
proto.paralympics.athletes.v1.SearchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.SearchResult;
  return proto.paralympics.athletes.v1.SearchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.SearchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.SearchResult}
 */
proto.paralympics.athletes.v1.SearchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.athletes.v1.Athlete;
      reader.readMessage(value,proto.paralympics.athletes.v1.Athlete.deserializeBinaryFromReader);
      msg.setAthlete(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeighting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.SearchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.SearchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.SearchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.SearchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAthlete();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.paralympics.athletes.v1.Athlete.serializeBinaryToWriter
    );
  }
  f = message.getWeighting();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional Athlete athlete = 1;
 * @return {?proto.paralympics.athletes.v1.Athlete}
 */
proto.paralympics.athletes.v1.SearchResult.prototype.getAthlete = function() {
  return /** @type{?proto.paralympics.athletes.v1.Athlete} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.athletes.v1.Athlete, 1));
};


/** @param {?proto.paralympics.athletes.v1.Athlete|undefined} value */
proto.paralympics.athletes.v1.SearchResult.prototype.setAthlete = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.SearchResult.prototype.clearAthlete = function() {
  this.setAthlete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.SearchResult.prototype.hasAthlete = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float weighting = 2;
 * @return {number}
 */
proto.paralympics.athletes.v1.SearchResult.prototype.getWeighting = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.paralympics.athletes.v1.SearchResult.prototype.setWeighting = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.ToggleFeaturedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.ToggleFeaturedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.ToggleFeaturedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.ToggleFeaturedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.ToggleFeaturedRequest}
 */
proto.paralympics.athletes.v1.ToggleFeaturedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.ToggleFeaturedRequest;
  return proto.paralympics.athletes.v1.ToggleFeaturedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.ToggleFeaturedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.ToggleFeaturedRequest}
 */
proto.paralympics.athletes.v1.ToggleFeaturedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.ToggleFeaturedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.ToggleFeaturedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.ToggleFeaturedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.ToggleFeaturedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.ToggleFeaturedRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.ToggleFeaturedRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.ToggleFeaturedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.ToggleFeaturedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.ToggleFeaturedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.ToggleFeaturedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    featured: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.ToggleFeaturedResponse}
 */
proto.paralympics.athletes.v1.ToggleFeaturedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.ToggleFeaturedResponse;
  return proto.paralympics.athletes.v1.ToggleFeaturedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.ToggleFeaturedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.ToggleFeaturedResponse}
 */
proto.paralympics.athletes.v1.ToggleFeaturedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFeatured(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.ToggleFeaturedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.ToggleFeaturedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.ToggleFeaturedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.ToggleFeaturedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatured();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool featured = 1;
 * @return {boolean}
 */
proto.paralympics.athletes.v1.ToggleFeaturedResponse.prototype.getFeatured = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.paralympics.athletes.v1.ToggleFeaturedResponse.prototype.setFeatured = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.FeaturedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.FeaturedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.FeaturedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.FeaturedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.FeaturedRequest}
 */
proto.paralympics.athletes.v1.FeaturedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.FeaturedRequest;
  return proto.paralympics.athletes.v1.FeaturedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.FeaturedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.FeaturedRequest}
 */
proto.paralympics.athletes.v1.FeaturedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.FeaturedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.FeaturedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.FeaturedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.FeaturedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.athletes.v1.FeaturedResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.FeaturedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.FeaturedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.FeaturedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.FeaturedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    athletesList: jspb.Message.toObjectList(msg.getAthletesList(),
    proto.paralympics.athletes.v1.Athlete.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.FeaturedResponse}
 */
proto.paralympics.athletes.v1.FeaturedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.FeaturedResponse;
  return proto.paralympics.athletes.v1.FeaturedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.FeaturedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.FeaturedResponse}
 */
proto.paralympics.athletes.v1.FeaturedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.athletes.v1.Athlete;
      reader.readMessage(value,proto.paralympics.athletes.v1.Athlete.deserializeBinaryFromReader);
      msg.addAthletes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.FeaturedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.FeaturedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.FeaturedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.FeaturedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAthletesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.paralympics.athletes.v1.Athlete.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Athlete athletes = 1;
 * @return {!Array<!proto.paralympics.athletes.v1.Athlete>}
 */
proto.paralympics.athletes.v1.FeaturedResponse.prototype.getAthletesList = function() {
  return /** @type{!Array<!proto.paralympics.athletes.v1.Athlete>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.paralympics.athletes.v1.Athlete, 1));
};


/** @param {!Array<!proto.paralympics.athletes.v1.Athlete>} value */
proto.paralympics.athletes.v1.FeaturedResponse.prototype.setAthletesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.paralympics.athletes.v1.Athlete=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.athletes.v1.Athlete}
 */
proto.paralympics.athletes.v1.FeaturedResponse.prototype.addAthletes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.paralympics.athletes.v1.Athlete, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.athletes.v1.FeaturedResponse.prototype.clearAthletesList = function() {
  this.setAthletesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.RestoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.RestoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.RestoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.RestoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.RestoreRequest}
 */
proto.paralympics.athletes.v1.RestoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.RestoreRequest;
  return proto.paralympics.athletes.v1.RestoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.RestoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.RestoreRequest}
 */
proto.paralympics.athletes.v1.RestoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.RestoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.RestoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.RestoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.RestoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.RestoreRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.RestoreRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.RestoreResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.RestoreResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.RestoreResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.RestoreResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    athlete: (f = msg.getAthlete()) && proto.paralympics.athletes.v1.Athlete.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.RestoreResponse}
 */
proto.paralympics.athletes.v1.RestoreResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.RestoreResponse;
  return proto.paralympics.athletes.v1.RestoreResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.RestoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.RestoreResponse}
 */
proto.paralympics.athletes.v1.RestoreResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.athletes.v1.Athlete;
      reader.readMessage(value,proto.paralympics.athletes.v1.Athlete.deserializeBinaryFromReader);
      msg.setAthlete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.RestoreResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.RestoreResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.RestoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.RestoreResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAthlete();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.paralympics.athletes.v1.Athlete.serializeBinaryToWriter
    );
  }
};


/**
 * optional Athlete athlete = 1;
 * @return {?proto.paralympics.athletes.v1.Athlete}
 */
proto.paralympics.athletes.v1.RestoreResponse.prototype.getAthlete = function() {
  return /** @type{?proto.paralympics.athletes.v1.Athlete} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.athletes.v1.Athlete, 1));
};


/** @param {?proto.paralympics.athletes.v1.Athlete|undefined} value */
proto.paralympics.athletes.v1.RestoreResponse.prototype.setAthlete = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.athletes.v1.RestoreResponse.prototype.clearAthlete = function() {
  this.setAthlete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.athletes.v1.RestoreResponse.prototype.hasAthlete = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.PurgeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.PurgeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.PurgeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PurgeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.PurgeRequest}
 */
proto.paralympics.athletes.v1.PurgeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.PurgeRequest;
  return proto.paralympics.athletes.v1.PurgeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.PurgeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.PurgeRequest}
 */
proto.paralympics.athletes.v1.PurgeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.PurgeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.PurgeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.PurgeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PurgeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.athletes.v1.PurgeRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.athletes.v1.PurgeRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.athletes.v1.PurgeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.athletes.v1.PurgeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.athletes.v1.PurgeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PurgeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.athletes.v1.PurgeResponse}
 */
proto.paralympics.athletes.v1.PurgeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.athletes.v1.PurgeResponse;
  return proto.paralympics.athletes.v1.PurgeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.athletes.v1.PurgeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.athletes.v1.PurgeResponse}
 */
proto.paralympics.athletes.v1.PurgeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.athletes.v1.PurgeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.athletes.v1.PurgeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.athletes.v1.PurgeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.athletes.v1.PurgeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.paralympics.athletes.v1.Field = {
  ATHLETEID: 0,
  ATHLETESLUG: 1,
  ATHLETENAME: 2,
  ATHLETEREGION: 3,
  ATHLETEDOB: 4,
  ATHLETECLASS: 5,
  ATHLETEIMGPROFILE: 6,
  ATHLETEHERO: 7,
  ATHLETEHEROALT: 8
};

/**
 * @enum {number}
 */
proto.paralympics.athletes.v1.ErrorCode = {
  REQUIRED: 0
};

/**
 * @enum {number}
 */
proto.paralympics.athletes.v1.SortField = {
  CREATE_DATE: 0,
  UPDATE_DATE: 1,
  DELETE_DATE: 2,
  NAME: 3
};

/**
 * @enum {number}
 */
proto.paralympics.athletes.v1.FeaturedFilter = {
  ALL: 0,
  FEATURED: 1,
  NOT_FEATURED: 2
};

/**
 * @enum {number}
 */
proto.paralympics.athletes.v1.SortDirection = {
  ASC: 0,
  DSC: 1
};

goog.object.extend(exports, proto.paralympics.athletes.v1);
