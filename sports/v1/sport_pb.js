// source: sports/v1/sport.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var content_v1_content_pb = require('../../content/v1/content_pb.js');
goog.object.extend(proto, content_v1_content_pb);
var content_v1_social_pb = require('../../content/v1/social_pb.js');
goog.object.extend(proto, content_v1_social_pb);
goog.exportSymbol('proto.paralympics.sports.v1.ErrorCode', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.ExtLink', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.FeaturedFilter', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.FeaturedRequest', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.Field', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.FieldError', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.Filter', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.ListSportsRequest', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.ListSportsResponse', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.Pagination', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.PurgeRequest', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.PurgeResponse', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.RestoreRequest', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.RestoreResponse', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.Season', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.SortDirection', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.SortField', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.SortOption', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.Sport', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.SportByIDRequest', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.SportBySlugRequest', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.SportContentRequest', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.ToggleFeaturedRequest', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.ToggleFeaturedResponse', null, global);
goog.exportSymbol('proto.paralympics.sports.v1.ValidationError', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.Sport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.sports.v1.Sport.repeatedFields_, null);
};
goog.inherits(proto.paralympics.sports.v1.Sport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.Sport.displayName = 'proto.paralympics.sports.v1.Sport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.ExtLink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.ExtLink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.ExtLink.displayName = 'proto.paralympics.sports.v1.ExtLink';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.SortOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.SortOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.SortOption.displayName = 'proto.paralympics.sports.v1.SortOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.Filter.displayName = 'proto.paralympics.sports.v1.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.SportByIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.SportByIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.SportByIDRequest.displayName = 'proto.paralympics.sports.v1.SportByIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.SportBySlugRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.SportBySlugRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.SportBySlugRequest.displayName = 'proto.paralympics.sports.v1.SportBySlugRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.Pagination.displayName = 'proto.paralympics.sports.v1.Pagination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.ListSportsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.sports.v1.ListSportsRequest.repeatedFields_, null);
};
goog.inherits(proto.paralympics.sports.v1.ListSportsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.ListSportsRequest.displayName = 'proto.paralympics.sports.v1.ListSportsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.SportContentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.SportContentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.SportContentRequest.displayName = 'proto.paralympics.sports.v1.SportContentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.ListSportsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.sports.v1.ListSportsResponse.repeatedFields_, null);
};
goog.inherits(proto.paralympics.sports.v1.ListSportsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.ListSportsResponse.displayName = 'proto.paralympics.sports.v1.ListSportsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.FieldError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.FieldError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.FieldError.displayName = 'proto.paralympics.sports.v1.FieldError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.ValidationError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.paralympics.sports.v1.ValidationError.repeatedFields_, null);
};
goog.inherits(proto.paralympics.sports.v1.ValidationError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.ValidationError.displayName = 'proto.paralympics.sports.v1.ValidationError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.ToggleFeaturedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.ToggleFeaturedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.ToggleFeaturedRequest.displayName = 'proto.paralympics.sports.v1.ToggleFeaturedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.ToggleFeaturedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.ToggleFeaturedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.ToggleFeaturedResponse.displayName = 'proto.paralympics.sports.v1.ToggleFeaturedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.FeaturedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.FeaturedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.FeaturedRequest.displayName = 'proto.paralympics.sports.v1.FeaturedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.RestoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.RestoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.RestoreRequest.displayName = 'proto.paralympics.sports.v1.RestoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.RestoreResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.RestoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.RestoreResponse.displayName = 'proto.paralympics.sports.v1.RestoreResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.PurgeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.PurgeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.PurgeRequest.displayName = 'proto.paralympics.sports.v1.PurgeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.paralympics.sports.v1.PurgeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.paralympics.sports.v1.PurgeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.paralympics.sports.v1.PurgeResponse.displayName = 'proto.paralympics.sports.v1.PurgeResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.sports.v1.Sport.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.Sport.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.Sport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.Sport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.Sport.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createDate: (f = msg.getCreateDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updateDate: (f = msg.getUpdateDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    deleteDate: (f = msg.getDeleteDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    season: jspb.Message.getFieldWithDefault(msg, 7, 0),
    icon: jspb.Message.getFieldWithDefault(msg, 8, ""),
    imgCard: (f = msg.getImgCard()) && content_v1_content_pb.Image.toObject(includeInstance, f),
    imgHero: (f = msg.getImgHero()) && content_v1_content_pb.Image.toObject(includeInstance, f),
    featured: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    extLink: (f = msg.getExtLink()) && proto.paralympics.sports.v1.ExtLink.toObject(includeInstance, f),
    socialProfilesList: jspb.Message.toObjectList(msg.getSocialProfilesList(),
    content_v1_social_pb.SocialProfile.toObject, includeInstance),
    imgCardAlt: jspb.Message.getFieldWithDefault(msg, 14, ""),
    imgHeroAlt: jspb.Message.getFieldWithDefault(msg, 15, ""),
    lead: jspb.Message.getFieldWithDefault(msg, 16, ""),
    body: jspb.Message.getFieldWithDefault(msg, 17, ""),
    bodyHtml: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.Sport}
 */
proto.paralympics.sports.v1.Sport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.Sport;
  return proto.paralympics.sports.v1.Sport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.Sport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.Sport}
 */
proto.paralympics.sports.v1.Sport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateDate(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdateDate(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDeleteDate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {!proto.paralympics.sports.v1.Season} */ (reader.readEnum());
      msg.setSeason(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 9:
      var value = new content_v1_content_pb.Image;
      reader.readMessage(value,content_v1_content_pb.Image.deserializeBinaryFromReader);
      msg.setImgCard(value);
      break;
    case 10:
      var value = new content_v1_content_pb.Image;
      reader.readMessage(value,content_v1_content_pb.Image.deserializeBinaryFromReader);
      msg.setImgHero(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFeatured(value);
      break;
    case 12:
      var value = new proto.paralympics.sports.v1.ExtLink;
      reader.readMessage(value,proto.paralympics.sports.v1.ExtLink.deserializeBinaryFromReader);
      msg.setExtLink(value);
      break;
    case 13:
      var value = new content_v1_social_pb.SocialProfile;
      reader.readMessage(value,content_v1_social_pb.SocialProfile.deserializeBinaryFromReader);
      msg.addSocialProfiles(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgCardAlt(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgHeroAlt(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setLead(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setBodyHtml(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.Sport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.Sport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.Sport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.Sport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreateDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdateDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDeleteDate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSeason();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getImgCard();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      content_v1_content_pb.Image.serializeBinaryToWriter
    );
  }
  f = message.getImgHero();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      content_v1_content_pb.Image.serializeBinaryToWriter
    );
  }
  f = message.getFeatured();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getExtLink();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.paralympics.sports.v1.ExtLink.serializeBinaryToWriter
    );
  }
  f = message.getSocialProfilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      content_v1_social_pb.SocialProfile.serializeBinaryToWriter
    );
  }
  f = message.getImgCardAlt();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getImgHeroAlt();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getLead();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getBodyHtml();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.sports.v1.Sport.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Sport.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.paralympics.sports.v1.Sport.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Sport.prototype.setSlug = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp create_date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.sports.v1.Sport.prototype.getCreateDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.sports.v1.Sport.prototype.setCreateDate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.sports.v1.Sport.prototype.clearCreateDate = function() {
  this.setCreateDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.sports.v1.Sport.prototype.hasCreateDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp update_date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.sports.v1.Sport.prototype.getUpdateDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.sports.v1.Sport.prototype.setUpdateDate = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.sports.v1.Sport.prototype.clearUpdateDate = function() {
  this.setUpdateDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.sports.v1.Sport.prototype.hasUpdateDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp delete_date = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.paralympics.sports.v1.Sport.prototype.getDeleteDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.paralympics.sports.v1.Sport.prototype.setDeleteDate = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.sports.v1.Sport.prototype.clearDeleteDate = function() {
  this.setDeleteDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.sports.v1.Sport.prototype.hasDeleteDate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.paralympics.sports.v1.Sport.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Sport.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Season season = 7;
 * @return {!proto.paralympics.sports.v1.Season}
 */
proto.paralympics.sports.v1.Sport.prototype.getSeason = function() {
  return /** @type {!proto.paralympics.sports.v1.Season} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.paralympics.sports.v1.Season} value */
proto.paralympics.sports.v1.Sport.prototype.setSeason = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string icon = 8;
 * @return {string}
 */
proto.paralympics.sports.v1.Sport.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Sport.prototype.setIcon = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional paralympics.content.v1.Image img_card = 9;
 * @return {?proto.paralympics.content.v1.Image}
 */
proto.paralympics.sports.v1.Sport.prototype.getImgCard = function() {
  return /** @type{?proto.paralympics.content.v1.Image} */ (
    jspb.Message.getWrapperField(this, content_v1_content_pb.Image, 9));
};


/** @param {?proto.paralympics.content.v1.Image|undefined} value */
proto.paralympics.sports.v1.Sport.prototype.setImgCard = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.sports.v1.Sport.prototype.clearImgCard = function() {
  this.setImgCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.sports.v1.Sport.prototype.hasImgCard = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional paralympics.content.v1.Image img_hero = 10;
 * @return {?proto.paralympics.content.v1.Image}
 */
proto.paralympics.sports.v1.Sport.prototype.getImgHero = function() {
  return /** @type{?proto.paralympics.content.v1.Image} */ (
    jspb.Message.getWrapperField(this, content_v1_content_pb.Image, 10));
};


/** @param {?proto.paralympics.content.v1.Image|undefined} value */
proto.paralympics.sports.v1.Sport.prototype.setImgHero = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.sports.v1.Sport.prototype.clearImgHero = function() {
  this.setImgHero(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.sports.v1.Sport.prototype.hasImgHero = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool featured = 11;
 * @return {boolean}
 */
proto.paralympics.sports.v1.Sport.prototype.getFeatured = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.paralympics.sports.v1.Sport.prototype.setFeatured = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional ExtLink ext_link = 12;
 * @return {?proto.paralympics.sports.v1.ExtLink}
 */
proto.paralympics.sports.v1.Sport.prototype.getExtLink = function() {
  return /** @type{?proto.paralympics.sports.v1.ExtLink} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.sports.v1.ExtLink, 12));
};


/** @param {?proto.paralympics.sports.v1.ExtLink|undefined} value */
proto.paralympics.sports.v1.Sport.prototype.setExtLink = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.sports.v1.Sport.prototype.clearExtLink = function() {
  this.setExtLink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.sports.v1.Sport.prototype.hasExtLink = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated paralympics.content.v1.SocialProfile social_profiles = 13;
 * @return {!Array<!proto.paralympics.content.v1.SocialProfile>}
 */
proto.paralympics.sports.v1.Sport.prototype.getSocialProfilesList = function() {
  return /** @type{!Array<!proto.paralympics.content.v1.SocialProfile>} */ (
    jspb.Message.getRepeatedWrapperField(this, content_v1_social_pb.SocialProfile, 13));
};


/** @param {!Array<!proto.paralympics.content.v1.SocialProfile>} value */
proto.paralympics.sports.v1.Sport.prototype.setSocialProfilesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.paralympics.content.v1.SocialProfile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.content.v1.SocialProfile}
 */
proto.paralympics.sports.v1.Sport.prototype.addSocialProfiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.paralympics.content.v1.SocialProfile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.sports.v1.Sport.prototype.clearSocialProfilesList = function() {
  this.setSocialProfilesList([]);
};


/**
 * optional string img_card_alt = 14;
 * @return {string}
 */
proto.paralympics.sports.v1.Sport.prototype.getImgCardAlt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Sport.prototype.setImgCardAlt = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string img_hero_alt = 15;
 * @return {string}
 */
proto.paralympics.sports.v1.Sport.prototype.getImgHeroAlt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Sport.prototype.setImgHeroAlt = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string lead = 16;
 * @return {string}
 */
proto.paralympics.sports.v1.Sport.prototype.getLead = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Sport.prototype.setLead = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string body = 17;
 * @return {string}
 */
proto.paralympics.sports.v1.Sport.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Sport.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string body_html = 18;
 * @return {string}
 */
proto.paralympics.sports.v1.Sport.prototype.getBodyHtml = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Sport.prototype.setBodyHtml = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.ExtLink.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.ExtLink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.ExtLink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ExtLink.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.ExtLink}
 */
proto.paralympics.sports.v1.ExtLink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.ExtLink;
  return proto.paralympics.sports.v1.ExtLink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.ExtLink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.ExtLink}
 */
proto.paralympics.sports.v1.ExtLink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.ExtLink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.ExtLink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.ExtLink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ExtLink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.paralympics.sports.v1.ExtLink.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.ExtLink.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.paralympics.sports.v1.ExtLink.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.ExtLink.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.SortOption.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.SortOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.SortOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.SortOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.SortOption}
 */
proto.paralympics.sports.v1.SortOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.SortOption;
  return proto.paralympics.sports.v1.SortOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.SortOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.SortOption}
 */
proto.paralympics.sports.v1.SortOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.paralympics.sports.v1.SortField} */ (reader.readEnum());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {!proto.paralympics.sports.v1.SortDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.SortOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.SortOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.SortOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.SortOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional SortField field = 1;
 * @return {!proto.paralympics.sports.v1.SortField}
 */
proto.paralympics.sports.v1.SortOption.prototype.getField = function() {
  return /** @type {!proto.paralympics.sports.v1.SortField} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.paralympics.sports.v1.SortField} value */
proto.paralympics.sports.v1.SortOption.prototype.setField = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SortDirection direction = 2;
 * @return {!proto.paralympics.sports.v1.SortDirection}
 */
proto.paralympics.sports.v1.SortOption.prototype.getDirection = function() {
  return /** @type {!proto.paralympics.sports.v1.SortDirection} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.paralympics.sports.v1.SortDirection} value */
proto.paralympics.sports.v1.SortOption.prototype.setDirection = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    deleted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    season: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    featured: jspb.Message.getFieldWithDefault(msg, 4, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.Filter}
 */
proto.paralympics.sports.v1.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.Filter;
  return proto.paralympics.sports.v1.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.Filter}
 */
proto.paralympics.sports.v1.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 2:
      var value = /** @type {!proto.paralympics.sports.v1.Season} */ (reader.readEnum());
      msg.setSeason(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 4:
      var value = /** @type {!proto.paralympics.sports.v1.FeaturedFilter} */ (reader.readEnum());
      msg.setFeatured(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSeason();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFeatured();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bool deleted = 1;
 * @return {boolean}
 */
proto.paralympics.sports.v1.Filter.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.paralympics.sports.v1.Filter.prototype.setDeleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Season season = 2;
 * @return {!proto.paralympics.sports.v1.Season}
 */
proto.paralympics.sports.v1.Filter.prototype.getSeason = function() {
  return /** @type {!proto.paralympics.sports.v1.Season} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.paralympics.sports.v1.Season} value */
proto.paralympics.sports.v1.Filter.prototype.setSeason = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string game_id = 3;
 * @return {string}
 */
proto.paralympics.sports.v1.Filter.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Filter.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional FeaturedFilter featured = 4;
 * @return {!proto.paralympics.sports.v1.FeaturedFilter}
 */
proto.paralympics.sports.v1.Filter.prototype.getFeatured = function() {
  return /** @type {!proto.paralympics.sports.v1.FeaturedFilter} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.paralympics.sports.v1.FeaturedFilter} value */
proto.paralympics.sports.v1.Filter.prototype.setFeatured = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.paralympics.sports.v1.Filter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.Filter.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.SportByIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.SportByIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.SportByIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.SportByIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.SportByIDRequest}
 */
proto.paralympics.sports.v1.SportByIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.SportByIDRequest;
  return proto.paralympics.sports.v1.SportByIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.SportByIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.SportByIDRequest}
 */
proto.paralympics.sports.v1.SportByIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.SportByIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.SportByIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.SportByIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.SportByIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.sports.v1.SportByIDRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.SportByIDRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.SportBySlugRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.SportBySlugRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.SportBySlugRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.SportBySlugRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    slug: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.SportBySlugRequest}
 */
proto.paralympics.sports.v1.SportBySlugRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.SportBySlugRequest;
  return proto.paralympics.sports.v1.SportBySlugRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.SportBySlugRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.SportBySlugRequest}
 */
proto.paralympics.sports.v1.SportBySlugRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.SportBySlugRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.SportBySlugRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.SportBySlugRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.SportBySlugRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string slug = 1;
 * @return {string}
 */
proto.paralympics.sports.v1.SportBySlugRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.SportBySlugRequest.prototype.setSlug = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.Pagination.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.Pagination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.Pagination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.Pagination.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.Pagination}
 */
proto.paralympics.sports.v1.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.Pagination;
  return proto.paralympics.sports.v1.Pagination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.Pagination}
 */
proto.paralympics.sports.v1.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 page = 1;
 * @return {number}
 */
proto.paralympics.sports.v1.Pagination.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.paralympics.sports.v1.Pagination.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 limit = 2;
 * @return {number}
 */
proto.paralympics.sports.v1.Pagination.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.paralympics.sports.v1.Pagination.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.sports.v1.ListSportsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.ListSportsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.ListSportsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ListSportsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagination: (f = msg.getPagination()) && proto.paralympics.sports.v1.Pagination.toObject(includeInstance, f),
    sortList: jspb.Message.toObjectList(msg.getSortList(),
    proto.paralympics.sports.v1.SortOption.toObject, includeInstance),
    filter: (f = msg.getFilter()) && proto.paralympics.sports.v1.Filter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.ListSportsRequest}
 */
proto.paralympics.sports.v1.ListSportsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.ListSportsRequest;
  return proto.paralympics.sports.v1.ListSportsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.ListSportsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.ListSportsRequest}
 */
proto.paralympics.sports.v1.ListSportsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.sports.v1.Pagination;
      reader.readMessage(value,proto.paralympics.sports.v1.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 2:
      var value = new proto.paralympics.sports.v1.SortOption;
      reader.readMessage(value,proto.paralympics.sports.v1.SortOption.deserializeBinaryFromReader);
      msg.addSort(value);
      break;
    case 3:
      var value = new proto.paralympics.sports.v1.Filter;
      reader.readMessage(value,proto.paralympics.sports.v1.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.ListSportsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.ListSportsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ListSportsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.paralympics.sports.v1.Pagination.serializeBinaryToWriter
    );
  }
  f = message.getSortList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.paralympics.sports.v1.SortOption.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.paralympics.sports.v1.Filter.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pagination pagination = 1;
 * @return {?proto.paralympics.sports.v1.Pagination}
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.getPagination = function() {
  return /** @type{?proto.paralympics.sports.v1.Pagination} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.sports.v1.Pagination, 1));
};


/** @param {?proto.paralympics.sports.v1.Pagination|undefined} value */
proto.paralympics.sports.v1.ListSportsRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SortOption sort = 2;
 * @return {!Array<!proto.paralympics.sports.v1.SortOption>}
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.getSortList = function() {
  return /** @type{!Array<!proto.paralympics.sports.v1.SortOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.paralympics.sports.v1.SortOption, 2));
};


/** @param {!Array<!proto.paralympics.sports.v1.SortOption>} value */
proto.paralympics.sports.v1.ListSportsRequest.prototype.setSortList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.paralympics.sports.v1.SortOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.sports.v1.SortOption}
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.addSort = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.paralympics.sports.v1.SortOption, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.clearSortList = function() {
  this.setSortList([]);
};


/**
 * optional Filter filter = 3;
 * @return {?proto.paralympics.sports.v1.Filter}
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.getFilter = function() {
  return /** @type{?proto.paralympics.sports.v1.Filter} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.sports.v1.Filter, 3));
};


/** @param {?proto.paralympics.sports.v1.Filter|undefined} value */
proto.paralympics.sports.v1.ListSportsRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.sports.v1.ListSportsRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.SportContentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.SportContentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.SportContentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.SportContentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sportId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sportSlug: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.SportContentRequest}
 */
proto.paralympics.sports.v1.SportContentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.SportContentRequest;
  return proto.paralympics.sports.v1.SportContentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.SportContentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.SportContentRequest}
 */
proto.paralympics.sports.v1.SportContentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSportId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSportSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.SportContentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.SportContentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.SportContentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.SportContentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSportId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSportSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sport_id = 1;
 * @return {string}
 */
proto.paralympics.sports.v1.SportContentRequest.prototype.getSportId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.SportContentRequest.prototype.setSportId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sport_slug = 2;
 * @return {string}
 */
proto.paralympics.sports.v1.SportContentRequest.prototype.getSportSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.SportContentRequest.prototype.setSportSlug = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.sports.v1.ListSportsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.ListSportsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.ListSportsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.ListSportsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ListSportsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sportsList: jspb.Message.toObjectList(msg.getSportsList(),
    proto.paralympics.sports.v1.Sport.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.ListSportsResponse}
 */
proto.paralympics.sports.v1.ListSportsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.ListSportsResponse;
  return proto.paralympics.sports.v1.ListSportsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.ListSportsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.ListSportsResponse}
 */
proto.paralympics.sports.v1.ListSportsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.sports.v1.Sport;
      reader.readMessage(value,proto.paralympics.sports.v1.Sport.deserializeBinaryFromReader);
      msg.addSports(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.ListSportsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.ListSportsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.ListSportsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ListSportsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSportsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.paralympics.sports.v1.Sport.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated Sport sports = 1;
 * @return {!Array<!proto.paralympics.sports.v1.Sport>}
 */
proto.paralympics.sports.v1.ListSportsResponse.prototype.getSportsList = function() {
  return /** @type{!Array<!proto.paralympics.sports.v1.Sport>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.paralympics.sports.v1.Sport, 1));
};


/** @param {!Array<!proto.paralympics.sports.v1.Sport>} value */
proto.paralympics.sports.v1.ListSportsResponse.prototype.setSportsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.paralympics.sports.v1.Sport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.sports.v1.Sport}
 */
proto.paralympics.sports.v1.ListSportsResponse.prototype.addSports = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.paralympics.sports.v1.Sport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.sports.v1.ListSportsResponse.prototype.clearSportsList = function() {
  this.setSportsList([]);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.paralympics.sports.v1.ListSportsResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.paralympics.sports.v1.ListSportsResponse.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.FieldError.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.FieldError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.FieldError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.FieldError.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, 0),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.FieldError}
 */
proto.paralympics.sports.v1.FieldError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.FieldError;
  return proto.paralympics.sports.v1.FieldError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.FieldError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.FieldError}
 */
proto.paralympics.sports.v1.FieldError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.paralympics.sports.v1.Field} */ (reader.readEnum());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {!proto.paralympics.sports.v1.ErrorCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.FieldError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.FieldError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.FieldError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.FieldError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Field field = 1;
 * @return {!proto.paralympics.sports.v1.Field}
 */
proto.paralympics.sports.v1.FieldError.prototype.getField = function() {
  return /** @type {!proto.paralympics.sports.v1.Field} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.paralympics.sports.v1.Field} value */
proto.paralympics.sports.v1.FieldError.prototype.setField = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ErrorCode code = 2;
 * @return {!proto.paralympics.sports.v1.ErrorCode}
 */
proto.paralympics.sports.v1.FieldError.prototype.getCode = function() {
  return /** @type {!proto.paralympics.sports.v1.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.paralympics.sports.v1.ErrorCode} value */
proto.paralympics.sports.v1.FieldError.prototype.setCode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.paralympics.sports.v1.ValidationError.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.ValidationError.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.ValidationError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.ValidationError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ValidationError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.paralympics.sports.v1.FieldError.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.ValidationError}
 */
proto.paralympics.sports.v1.ValidationError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.ValidationError;
  return proto.paralympics.sports.v1.ValidationError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.ValidationError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.ValidationError}
 */
proto.paralympics.sports.v1.ValidationError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.sports.v1.FieldError;
      reader.readMessage(value,proto.paralympics.sports.v1.FieldError.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.ValidationError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.ValidationError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.ValidationError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ValidationError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.paralympics.sports.v1.FieldError.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FieldError errors = 1;
 * @return {!Array<!proto.paralympics.sports.v1.FieldError>}
 */
proto.paralympics.sports.v1.ValidationError.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.paralympics.sports.v1.FieldError>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.paralympics.sports.v1.FieldError, 1));
};


/** @param {!Array<!proto.paralympics.sports.v1.FieldError>} value */
proto.paralympics.sports.v1.ValidationError.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.paralympics.sports.v1.FieldError=} opt_value
 * @param {number=} opt_index
 * @return {!proto.paralympics.sports.v1.FieldError}
 */
proto.paralympics.sports.v1.ValidationError.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.paralympics.sports.v1.FieldError, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.paralympics.sports.v1.ValidationError.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.ToggleFeaturedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.ToggleFeaturedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.ToggleFeaturedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ToggleFeaturedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.ToggleFeaturedRequest}
 */
proto.paralympics.sports.v1.ToggleFeaturedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.ToggleFeaturedRequest;
  return proto.paralympics.sports.v1.ToggleFeaturedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.ToggleFeaturedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.ToggleFeaturedRequest}
 */
proto.paralympics.sports.v1.ToggleFeaturedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.ToggleFeaturedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.ToggleFeaturedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.ToggleFeaturedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ToggleFeaturedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.sports.v1.ToggleFeaturedRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.ToggleFeaturedRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.ToggleFeaturedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.ToggleFeaturedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.ToggleFeaturedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ToggleFeaturedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    featured: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.ToggleFeaturedResponse}
 */
proto.paralympics.sports.v1.ToggleFeaturedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.ToggleFeaturedResponse;
  return proto.paralympics.sports.v1.ToggleFeaturedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.ToggleFeaturedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.ToggleFeaturedResponse}
 */
proto.paralympics.sports.v1.ToggleFeaturedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFeatured(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.ToggleFeaturedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.ToggleFeaturedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.ToggleFeaturedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.ToggleFeaturedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatured();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool featured = 1;
 * @return {boolean}
 */
proto.paralympics.sports.v1.ToggleFeaturedResponse.prototype.getFeatured = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.paralympics.sports.v1.ToggleFeaturedResponse.prototype.setFeatured = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.FeaturedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.FeaturedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.FeaturedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.FeaturedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.FeaturedRequest}
 */
proto.paralympics.sports.v1.FeaturedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.FeaturedRequest;
  return proto.paralympics.sports.v1.FeaturedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.FeaturedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.FeaturedRequest}
 */
proto.paralympics.sports.v1.FeaturedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.FeaturedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.FeaturedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.FeaturedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.FeaturedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.RestoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.RestoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.RestoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.RestoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.RestoreRequest}
 */
proto.paralympics.sports.v1.RestoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.RestoreRequest;
  return proto.paralympics.sports.v1.RestoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.RestoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.RestoreRequest}
 */
proto.paralympics.sports.v1.RestoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.RestoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.RestoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.RestoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.RestoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.sports.v1.RestoreRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.RestoreRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.RestoreResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.RestoreResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.RestoreResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.RestoreResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sport: (f = msg.getSport()) && proto.paralympics.sports.v1.Sport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.RestoreResponse}
 */
proto.paralympics.sports.v1.RestoreResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.RestoreResponse;
  return proto.paralympics.sports.v1.RestoreResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.RestoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.RestoreResponse}
 */
proto.paralympics.sports.v1.RestoreResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.paralympics.sports.v1.Sport;
      reader.readMessage(value,proto.paralympics.sports.v1.Sport.deserializeBinaryFromReader);
      msg.setSport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.RestoreResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.RestoreResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.RestoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.RestoreResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.paralympics.sports.v1.Sport.serializeBinaryToWriter
    );
  }
};


/**
 * optional Sport sport = 1;
 * @return {?proto.paralympics.sports.v1.Sport}
 */
proto.paralympics.sports.v1.RestoreResponse.prototype.getSport = function() {
  return /** @type{?proto.paralympics.sports.v1.Sport} */ (
    jspb.Message.getWrapperField(this, proto.paralympics.sports.v1.Sport, 1));
};


/** @param {?proto.paralympics.sports.v1.Sport|undefined} value */
proto.paralympics.sports.v1.RestoreResponse.prototype.setSport = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.paralympics.sports.v1.RestoreResponse.prototype.clearSport = function() {
  this.setSport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.paralympics.sports.v1.RestoreResponse.prototype.hasSport = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.PurgeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.PurgeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.PurgeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.PurgeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.PurgeRequest}
 */
proto.paralympics.sports.v1.PurgeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.PurgeRequest;
  return proto.paralympics.sports.v1.PurgeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.PurgeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.PurgeRequest}
 */
proto.paralympics.sports.v1.PurgeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.PurgeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.PurgeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.PurgeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.PurgeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.paralympics.sports.v1.PurgeRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.paralympics.sports.v1.PurgeRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.paralympics.sports.v1.PurgeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.paralympics.sports.v1.PurgeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.paralympics.sports.v1.PurgeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.PurgeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.paralympics.sports.v1.PurgeResponse}
 */
proto.paralympics.sports.v1.PurgeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.paralympics.sports.v1.PurgeResponse;
  return proto.paralympics.sports.v1.PurgeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.paralympics.sports.v1.PurgeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.paralympics.sports.v1.PurgeResponse}
 */
proto.paralympics.sports.v1.PurgeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.paralympics.sports.v1.PurgeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.paralympics.sports.v1.PurgeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.paralympics.sports.v1.PurgeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.paralympics.sports.v1.PurgeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.paralympics.sports.v1.Season = {
  NONE: 0,
  WINTER: 1,
  SUMMER: 2
};

/**
 * @enum {number}
 */
proto.paralympics.sports.v1.SortField = {
  CREATE_DATE: 0,
  UPDATE_DATE: 1,
  DELETE_DATE: 2,
  NAME: 3
};

/**
 * @enum {number}
 */
proto.paralympics.sports.v1.FeaturedFilter = {
  EITHER: 0,
  FEATURED: 1,
  NOTFEATURED: 2
};

/**
 * @enum {number}
 */
proto.paralympics.sports.v1.SortDirection = {
  ASC: 0,
  DSC: 1
};

/**
 * @enum {number}
 */
proto.paralympics.sports.v1.Field = {
  SPORTID: 0,
  SPORTSLUG: 1,
  SPORTNAME: 2,
  SPORTSEASON: 3,
  SPORTICON: 4,
  SPORTIMGCARD: 5,
  SPORTIMGHERO: 6,
  SPORTLEAD: 7,
  SPORTBODY: 8
};

/**
 * @enum {number}
 */
proto.paralympics.sports.v1.ErrorCode = {
  REQUIRED: 0,
  INVALIDUUIDV4: 1,
  INVALIDURI: 2,
  IMAGEINVALID: 3
};

goog.object.extend(exports, proto.paralympics.sports.v1);
